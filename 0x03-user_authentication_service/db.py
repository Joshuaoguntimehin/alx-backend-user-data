#!/usr/bin/env python3
"""DB module
"""
from sqlalchemy.orm.exc import NoResultFound
from sqlalchemy.exc import InvalidRequestError
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm.session import Session

from user import Base, User


class DB:
    """DB class
    """

    def __init__(self) -> None:
        """Initialize a new DB instance
        """
        self._engine = create_engine("sqlite:///a.db", echo=True)
        Base.metadata.drop_all(self._engine)
        Base.metadata.create_all(self._engine)
        self.session = Session()
        self.__session = None

    @property
    def _session(self) -> Session:
        """Memoized session object
        """
        if self.__session is None:
            DBSession = sessionmaker(bind=self._engine)
            self.__session = DBSession()
        return self.__session

    def add_user(self, email: str, hashed_password: str) -> User:
        """Add a user to the database.
        """
        user = User(email=email, hashed_password=hashed_password)
        # Add the user to the session
        self._session.add(user)
        self._session.commit()
        # Refresh the session to populate `id` and other autogenerated fields
        return user
    
    
    def find_user_by(self, **kwargs) -> User:
        for key in kwargs.keys():
            if not hasattr(User, key):
                raise InvalidRequestError("Invalid query arguments provided")
        
        user = self.__session.query(User).filter_by(**kwargs).first()
        
        if user:
            return 
        raise NoResultFound()
    
if __name__== '__main__':
    my_db =DB()
    
user = my_db.add_user("test@test.com", "PwdHashed")
print(user.id)

find_user = my_db.find_user_by(email="test@test.com")
print(find_user.id)

try:
    find_user = my_db.find_user_by(email="test2@test.com")
    print(find_user.id)
except NoResultFound:
    print("Not found")

try:
    find_user = my_db.find_user_by(no_email="test@test.com")
    print(find_user.id)
except InvalidRequestError:
    print("Invalid")          
    
